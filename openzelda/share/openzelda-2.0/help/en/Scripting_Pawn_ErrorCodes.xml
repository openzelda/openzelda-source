<?xml-stylesheet href="../common.css"?><div xmlns="http://www.w3.org/1999/xhtml">
	<div class="navbar"><a href="Scripting.xml">Scripting</a> &gt;</div>
	<h2>Error and warning messages</h2>
	<p>When the compiler finds an error in a file, it outputs a message giving, in this order:</p>
	<ol>
		<li>the name of the file</li>
		<li>the line number were the compiler detected the error between parentheses, directly behind the filename</li>
		<li>the error class ("error", "fatal error" or "warning")</li>
		<li>an error number</li>
		<li>a descriptive error message</li>
	</ol>
	<p>For example:</p>
	<pre>demo.mps [line 3] error 001 expected token: ";", but found "{"</pre>
	<p>Note: the line number given by the compiler may specify a position behind the actual error, since the compiler cannot always establish an error before having analyzed the complete expression.</p>

	<h3>Fixing Errors</h3>
	<p>When scripting you will come across the Error Dialog (screen above), these have Warning highlighted in Yellow and Error are highlighted in Red and should focus on first. </p>
	<p>Many of the error can fix by reading what the error description below and the software provide ConsoleOutput() + ConsoleLog() functions to display the values from variables. </p>
	
	<h3>Errors</h3>
	<h4>001: expected token: token, but found token</h4>
	<p>A required token is omitted.</p>

	<h4>002: only a single statement (or expression) can follow each</h4>
	<p>"case" Every case in a switch statement can hold exactly one statement.</p>
	<p>To put multiple statements in a case, enclose these statements between braces (which creates a compound statement).</p>

	<h4>003: declaration of a local variable must appear in a compound block</h4>
	<p>The declaration of a local variable must appear between braces ("{...}") at the active scope level.</p>
	<p>When the parser flags this error, a variable declaration appears as the only statement of a function or the only statement below an if, else, for, while or do statement. Note that, since local variables are accessible only from (or below) the scope that their declaration appears in, having a variable declaration as the only statement at any scope is useless.</p>

	<h4>004: function name is not implemented</h4>
	<p>There is no implementation for the designated function. The function may have been "forwardly" declared —or prototyped— but the full function definition including a statement, or statement block, is missing.</p>

	<h4>005: function may not have arguments</h4>
	<p>The function main() is the program entry point. It may not have arguments.</p>

	<h4>006: must be assigned to an array</h4>
	<p>String literals or arrays must be assigned to an array. This error message may also indicate a missing index (or indices) at the array on the right side of the "=" sign.</p>

	<h4>007: operator cannot be redefined</h4>
	<p>Only a select set of operators may be redefined, this operator is not one of them. See page 86 for details.</p>

	<h4>008: must be a constant expression; assumed zero</h4>
	<p>The size of arrays and the parameters of most directives must be constant values.</p>

	<h4>009: invalid array size (negative, zero or out of bounds)</h4>
	<p>The number of elements of an array must always be 1 or more. In addition, an array that big that it does exceeds the range of a cell is invalid too.</p>

	<h4>010: illegal function or declaration</h4>
	<p>The compiler expects a declaration of a global variable or of a function at the current location, but it cannot interpret it as such.</p>

	<h4>011: invalid outside functions</h4>
	<p>The instruction or statement is invalid at a global level. Local labels and (compound) statements are only valid if used within functions.</p>

	<h4>012: invalid function call, not a valid address</h4>
	<p>The symbol is not a function.</p>

	<h4>013: no entry point (no public functions)</h4>
	<p>The file does not contain a main function or any public function. The compiled file thereby does not have a starting point for the execution.</p>

	<h4>014: invalid statement; not in switch</h4>
	<p>The statements case and default are only valid inside a switch statement.</p>

	<h4>015: "default" must be the last clause in switch statement</h4>
	<p>pawn requires the default clause to be the last clause in a switch statement.</p>

	<h4>016: multiple defaults in "switch"</h4>
	<p>Each switch statement may only have one default clause.</p>

	<h4>017: undefined symbol symbol</h4>
	<p>The symbol (variable, constant or function) is not declared.</p>

	<h4>018: initialization data exceeds declared size</h4>
	<p>An array with an explicit size is initialized, but the number of initiallers exceeds the number of elements specified. For example, in "arr[3]={1,2,3,4};" the array is specified to have three elements, but there are four initiallers.</p>

	<h4>019: not a label: name</h4>
	<p>A goto statement branches to a symbol that is not a label.</p>

	<h4>020: invalid symbol name</h4>
	<p>A symbol may start with a letter, an underscore or an "at" sign ("@") and may be followed by a series of letters, digits, underscore characters and "@" characters.</p>

	<h4>021: symbol already defined: identifier</h4>
	<p>The symbol was already defined at the current level.</p>

	<h4>022: must be lvalue (non-constant)</h4>
	<p>The symbol that is altered (incremented, decremented, assigned a value, etc.) must be a variable that can be modified (this kind of variable is called an lvalue). Functions, string literals, arrays and constants are no lvalues. Variables declared with the "const" attribute are no lvalues either.</p>

	<h4>023: array assignment must be simple assignment</h4>
	<p>When assigning one array to another, you cannot combine an arithmetic operation with the assignment (e.g., you cannot use the "+=" operator).</p>

	<h4>024: "break" or "continue" is out of context</h4>
	<p>The statements break and continue are only valid inside the context of a loop (a do, for or while statement). Unlike the languages C/C++ and Java, break does not jump out of a switch statement.</p>

	<h4>025: function heading differs from prototype</h4>
	<p>The number of arguments given at a previous declaration of the function does not match the number of arguments given at the current declaration.</p>

	<h4>026: no matching "#if..."</h4>
	<p>The directive #else or #endif was encountered, but no matching #if directive was found.</p>

	<h4>027: invalid character constant</h4>
	<p>Escape sequence: One likely cause for this error is the occurrence of an unknown 99 escape sequence, like "\x". Putting multiple characters between single quotes, as in ’abc’also issues this error message. A third cause for this error is a situation where a character constant was expected, but none (or a non-character expression) were provided.</p>

	<h4>028: invalid subscript (not an array or too many subscripts):</h4>
	<p>identifier The subscript operators "[" and "]" are only valid with arrays. The number of square bracket pairs may not exceed the number of dimensions of the array.</p>

	<h4>029: invalid expression, assumed zero</h4>
	<p>The compiler could not interpret the expression.</p>

	<h4>030: compound statement not closed at the end of file</h4>
	<p>An unexpected end of file occurred. One or more compound statements are still unfinished (i.e. the closing brace "}" has not been found).</p>

	<h4>031: unknown directive</h4>
	<p>The character "#" appears first at a line, but no valid directive was specified.</p>

	<h4>032: array index out of bounds</h4>
	<p>The array index is larger than the highest valid entry of the array.</p>

	<h4>033: array must be indexed (variable name)</h4>
	<p>An array as a whole cannot be used in a expression; you must indicate an element of the array between square brackets.</p>

	<h4>034: argument does not have a default value (argument index)</h4>
	<p>You can only use the argument placeholder when the function definition specifies a default value for the argument.</p>

	<h4>035: argument type mismatch (argument index)</h4>
	<p>The argument that you pass is different from the argument that the function expects, and the compiler cannot convert the passed-in argument to the required type. For example, you cannot pass the literal value "1" as an argument when the function expects an array or a reference.</p>

	<h4>036: empty statement</h4>
	<p>The line contains a semicolon that is not preceded by an expression. pawn does not support a semicolon as an empty statement, use an empty compound block instead.</p>

	<h4>037: invalid string (possibly non-terminated string)</h4>
	<p>A string was not well-formed; for example, the final quote that ends a string is missing, or the filename for the #include directive was not enclosed in double quotes or angle brackets.</p>

	<h4>038: extra characters on line</h4>
	<p>There were trailing characters on a line that contained a directive (a directive starts with a # symbol, see page 118).</p>

	<h4>039: constant symbol has no size</h4>
	<p>A variable has a size (measured in a number of cells), a constant has no size. That is, you cannot use a (symbolic) constant with the sizeof operator, for example.</p>

	<h4>040: duplicate "case" label (value value)</h4>
	<p>A preceding "case label" in the list of the switch statement evaluates to the same value.</p>

	<h4>041: invalid ellipsis, array size is not known</h4>
	<p>You used a syntax like "arr[] = { 1, ... };", which is invalid, because the compiler cannot deduce the size of the array from the declaration.</p>

	<h4>042: invalid combination of class specifiers</h4>
	<p>A function or variable is denoted as both "public" and "native", which is unsupported. Other combinations may also be unsupported; for example, a function cannot be both "public" and "stock" (a variable may be declared both "public" and "stock").</p>

	<h4>043: character constant exceeds range for packed string</h4>
	<p>Usually an attempt to store a Unicode character in a packed string where a packed character is 8-bits.</p>

	<h4>044: mixing named and positional parameters</h4>
	<p>You must either use named parameters or positional parameters for all parameters of the function.</p>

	<h4>045: too many function arguments</h4>
	<p>The maximum number of function arguments is currently limited to 64.</p>

	<h4>046: unknown array size (variable name)</h4>
	<p>For array assignment, the size of both arrays must be explicitly defined, also if they are passed as function arguments.</p>

	<h4>047: array sizes do not match, or destination array is too small</h4>
	<p>For array assignment, the arrays on the left and the right side of the assignment operator must have the same number of dimensions. In addition: <br /> - for multi-dimensional arrays, both arrays must have the same size; <br /> - for single arrays with a single dimension, the array on the left side of the assignment operator must have a size that is equal or bigger than the one on the right side.</p>
	<p>When passing arrays to a function argument, these rules also hold for the array that is passed to the function (in the function call) versus the array declared in the function definition.</p>
	<p>When a function returns an array, all return statements must specify an array with the same size and dimensions.</p>

	<h4>048: array dimensions do not match</h4>
	<p>For an array assignment, the dimensions of the arrays on both sides of the "=" sign must match; when passing arrays to a function argument, the arrays passed to the function (in the function call) must match with the definition of the function arguments.</p>
	<p>When a function returns an array, all return statements must specify an array with the same size and dimensions.</p>

	<h4>049: invalid line continuation</h4>
	<p>A line continuation character (a backslash at the end of a line) is at an invalid position, for example at the end of a file or in a single line comment.</p>

	<h4>050: invalid range</h4>
	<p>A numeric range with the syntax "n1 .. n2", where n1 and n2 are numeric constants, is invalid. Either one of the values in not a valid number, or n1 is not smaller than n2.</p>

	<h4>051: invalid subscript, use "[ ]" operators on major dimensions</h4>
	<p>You can use the "array character index" operator (braces: "{ }" only for the last dimension. For other dimensions, you must use the cell index operator (square brackets: " [ ]").</p>

	<h4>052: multi-dimensional arrays must be fully initialized</h4>
	<p>If an array with more than one dimension is initialized at its declaration, then there must be equally many literal vectors/sub- arrays at the right of the equal sign ("=") as specified for the major dimension(s) of the array.</p>

	<h4>053: exceeding maximum number of dimensions</h4>
	<p>The current implementation of the pawn compiler only supports arrays with one or two dimensions.</p>

	<h4>054: unmatched closing brace</h4>
	<p>A closing brace ("}") was found without matching opening brace ("{").</p>

	<h4>055: start of function body without function header</h4>
	<p>An opening brace ("{") was found outside the scope of a function. This may be caused by a semicolon at the end of a preceding function header.</p>

	<h4>056: local variables and function arguments cannot be public</h4>
	<p>A local variable or a function argument starts with the character "@", which is invalid.</p>

	<h4>057: Unfinished expression before compiler directive</h4>
	<p>Compiler directives may only occur between statements, not inside a statement. This error typically occurs when an expression statement is split over multiple lines and a compiler directive appears between the start and the end of the expression. This is not supported.</p>

	<h4>058: duplicate argument; same argument is passed twice</h4>
	<p>Named versus In the function call, the same argument appears twice, possibly positional parame- through a mixture of named and positional parameters. ters: 74</p>

	<h4>059: function argument may not have a default value (variable</h4>
	<p>name) All arguments of public functions must be passed explicitly. Public functions are typically called from the host application, who has no knowledge of the default parameter values. Arguments of user defined operators are implied from the expression and cannot be inferred from the default value of an argument.</p>

	<h4>060: multiple "#else" directives between "#if . . . #endif</h4>
	<p>Two or more #else directives appear in the body between the matching #if and #endif.</p>

	<h4>061: "#elseif" directive follows an "#else" directive</h4>
	<p>All #elseif directives must appear before the #else directive. This error may also indicate that an #endif directive for a higher level is missing.</p>

	<h4>062: number of operands does not fit the operator</h4>
	<p>When redefining an operator, the number of operands that the operator has (1 for unary operators and 2 for binary operators) must be equal to the number of arguments of the operator function.</p>

	<h4>063: operator requires that the function result has a "bool"</h4>
	<p>tag Logical and relational operators are defined as having a result that is either true (1) or false (0) and having a "bool" tag. A user defined operator should adhere to this definition.</p>

	<h4>064: cannot change predefined operators</h4>
	<p>One cannot define operators to work on untagged values, for example, because pawn already defines this operation.</p>

	<h4>065: function argument may only have a single tag (argument number)</h4>
	<p>In a user defined operator, a function argument may not have multiple tags.</p>

	<h4>066: function argument may not be a reference argument or</h4>
	<p>an array (argument number) In a user defined operator, all arguments must be cells (non-arrays) that are passed "by value".</p>

	<h4>067: variable cannot be both a reference and an array (variable</h4>
	<p>name) A function argument may be denoted as a "reference" or as an array, but not as both.</p>

	<h4>068: invalid rational number precision in #pragma</h4>
	<p>The precision was negative or too high. For ﬂoating point rational numbers, the precision specification should be omitted.</p>

	<h4>069: rational number format already defined</h4>
	<p>This #pragma conﬂicts with an earlier #pragma that specified a different format.</p>

	<h4>070: rational number support was not enabled</h4>
	<p>A rational literal number was encountered, but the format for rational numbers was not specified.</p>

	<h4>071: user-defined operator must be declared before use (function name)</h4>
	<p>Like a variable, a user-defined operator must be declared before its first use. This message indicates that prior to the declaration of the user-defined operator, an instance where the operator was used on operands with the same tags occurred. This may either indicate that the program tries to make mixed use of the default operator and a user-defined operator (which is unsupported), or that the user-defined operator must be "forwardly declared".</p>

	<h4>072: "sizeof" operator is invalid on "function" symbols</h4>
	<p>You used something like "sizeof MyCounter" where the symbol "MyCounter" is not a variable, but a function. You cannot request the size of a function.</p>

	<h4>073: function argument must be an array (argument name)</h4>
	<p>The function argument is a constant or a simple variable, but the function requires that you pass an array.</p>

	<h4>074: #define pattern must start with an alphabetic character</h4>
	<p>Any pattern for the #define directive must start with a letter, an underscore ("_") or an "@"-character. The pattern is the first word that follows the #define keyword.</p>

	<h4>075: input line too long (after substitutions)</h4>
	<p>Either the source file contains a very long line, or text substitutions make a line that was initially of acceptable length grow beyond its bounds. This may be caused by a text substitution that causes recursive substitution (the pattern matching a portion of the replacement text, so that this part of the replacement text is also matched and replaced, and so forth).</p>

	<h4>076: syntax error in the expression, or invalid function call</h4>
	<p>The expression statement was not recognized as a valid statement (so it is a "syntax error"). From the part of the string that was parsed, it looks as if the source line contains a function call in a "procedure call" syntax (omitting the parentheses), but the function result is used —assigned to a variable, passed as a parameter, used in an expression. . .</p>

	<h4>077: malformed UTF-8 encoding, or corrupted file: filename</h4>
	<p>The file starts with an UTF-8 signature, but it contains encodings that are invalid UTF-8. If the source file was created by an editor or converter that supports UTF-8, the UTF-8 support is non-conforming.</p>

	<h4>078: function uses both "return" and "return"</h4>
	<p>The function returns both with and without a return value. The function should be consistent in always returning with a function result, or in never returning a function result.</p>

	<h4>079: inconsistent return types (array &amp; non-array)</h4>
	<p>The function returns both values and arrays, which is not allowed. If a function returns an array, all return statements must specify an array (of the same size and dimensions).</p>

	<h4>080: unknown symbol, or not a constant symbol (symbol name)</h4>
	<p>Where a constant value was expected, an unknown symbol or a non-constant symbol (variable) was found.</p>

	<h4>081: cannot take a tag as a default value for an indexed array</h4>
	<p>parameter (symbol name) The tagof operator was used on an array parameter where the array also had an index. This is unsupported.</p>

	<h4>082: user-defined operators and native functions may not have states</h4>
	<p>Only standard and public functions may have states.</p>

	<h4>083: a function or variable may only belong to a single automa-</h4>
	<p>ton (symbol name) There are multiple automatons in the state declaration for the indicated function or variable, which is not supported. In the case of a function: all instances of the function must belong to the same automaton. In the case of a variable: it is allowed to have several variables with the same name belonging to different automatons, but only in separate declarations —these are distinct variables.</p>

	<h4>084: state conﬂict: one of the states is already assigned to</h4>
	<p>another implementation (symbol name) The specified state appears in the state specifier of two implemen- tations of the same function.</p>

	<h4>085: no states are defined for symbol name</h4>
	<p>When this error occurs on a function, this function has a fall-back implementation, but no other states. If the error refers to a variable, this variable does not have a list of states between the &lt; and &gt; characters. Use a state-less function or variable instead.</p>

	<h4>086: unknown automaton name</h4>
	<p>The "state" statement refers to an unknown automaton.</p>

	<h4>087: unknown state name for automaton name</h4>
	<p>The "state" statement refers to an unknown state (for the specified automaton).</p>

	<h4>088: public variables and local variables may not have states</h4>
	<p>(symbol name) Only standard (global) variables may have a list of states (and an automaton) at the end of a declaration.</p>

	<h4>089: state variables may not be initialized (symbol name)</h4>
	<p>Variables with a state list may not have initializers. State variables should always be initialized through an assignment (instead of at their declaration), because their initial value is indeterminate.</p>

	<h4>090: public functions may not return arrays (symbol name)</h4>
	<p>A public function may not return an array. Returning arrays is allowed only for normal functions.</p>

	<h4>091: ambiguous constant; tag override is required (symbol name)</h4>
	<p>The constant exists enumerations, with different tags. The expected tag is different from any of these enumerations, and therefore the parser cannot choose the correct constant automatically. You need to use a tag override to indicate the correct constant.</p>
	<h3>Fatal Errors</h3>

	<h4>100: cannot read from file: filename</h4>
	<p>The compiler cannot find the specified file or does not have access to it.</p>

	<h4>101: cannot write to file: filename</h4>
	<p>The compiler cannot write to the specified output file, probably caused by insuﬃcient disk space or restricted access rights (the file could be read-only, for example).</p>

	<h4>102: table overﬂow: table name</h4>
	<p>An internal table in the pawn parser is too small to hold the required data. Some tables are dynamically growable, which means that there was insufficient memory to resize the table. The "table name" is one of the following: <br />"staging buffer": the staging buffer holds the code generated for an expression before it is passed to the peephole optimizer. The staging buffer grows dynamically, so an overﬂow of the staging buffer basically is an "out of memory" error. <br />"loop table": the loop table is a stack used with nested do, for, and while statements. The table allows nesting of these statements up to 24 levels. <br />"literal table": this table keeps the literal constants (numbers, strings) that are used in expressions and as initiallers for arrays. The literal table grows dynamically, so an overﬂow of the literal table basically is an "out of memory" error. <br />"compiler stack": the compiler uses a stack to store temporary information it needs while parsing. An overﬂow of this stack is probably caused by deeply nested (or recursive) file inclusion. The compiler stack grows dynamically, so an overﬂow of the compiler stack basically is an "out of memory" error.</p>
	<pre><br />"option table": in case that there are more options on the command line or in the response file than the compiler can cope with.</pre>

	<h4>103: insufficient memory</h4>
	<p>General "out of memory" error.</p>

	<h4>104: invalid assembler instruction symbol</h4>
	<p>An invalid opcode in an #emit directive.</p>

	<h4>105: numeric overﬂow, exceeding capacity</h4>
	<p>A numeric constant, notably a dimension of an array, is too large for the compiler to handle. For example, when compiled as a 16-bit application, the compiler cannot handle arrays with more than 32767 elements.</p>

	<h4>106: compiled script exceeds the maximum memory size</h4>
	<p>(number bytes) See also #pragma amxlimit on page The memory size for the abstract machine that is needed to run 120 the script exceeds the value set with #pragma amxlimit. This means that the script is too large to be supported by the host.</p>
	<p>You might try reducing the script’s memory requirements by: <br /> - setting a smaller stack/heap area <br /> - using packed strings instead of unpacked strings <br /> - putting repeated code in separate functions; <br /> - putting repeated data (strings) in global variables; <br /> - trying to find more compact algorithms to perform the same task.</p>

	<h4>107: too many error/warning messages on one line</h4>
	<p>A single line that causes several error/warning messages is often an indication that the pawn parser is unable to "recover" from an earlier error. In this situation, the parser is unlikely to make any sense of the source code that follows — producing only (more) inappropriate error messages. Therefore, compilation is halted.</p>

	<h4>108: codepage mapping file not found</h4>

	<h4>109: invalid path: path name</h4>
	<p>A path, for example for include files or codepage files, is invalid.</p>

	<h4>110: assertion failed: expression</h4>
	<p>Compile-time assertion failed.</p>

	<h4>111: user error: message</h4>
	<p>The parser fell on an #error directive.</p>
	<h3>Warnings</h3>

	<h4>200: symbol is truncated to number characters</h4>
	<p>The symbol is longer than the maximum symbol length. The maximum length of a symbol depends on whether the symbol is native, public or neither. Truncation may cause different symbol names to become equal, which may cause error 021 or warning 219.</p>

	<h4>201: redefinition of constant/macro (symbol name)</h4>
	<p>The symbol was previously defined to a different value, or the text substitution macro that starts with the prefix name was redefined with a different substitution text.</p>

	<h4>202: number of arguments does not match definition</h4>
	<p>At a function call, the number of arguments passed to the function (actual arguments) differs from the number of formal arguments declared in the function heading. To declare functions with variable argument lists, use an ellipsis ( ...) behind the last known argument in the function heading; for example: print(formatstring,...);</p>

	<h4>203: symbol is never used: identifier</h4>
	<p>A symbol is defined but never used. Public functions are excluded from the symbol usage check (since these may be called from the outside).</p>

	<h4>204: symbol is assigned a value that is never used: identifier</h4>
	<p>A value is assigned to a symbol, but the contents of the symbol are never accessed.</p>

	<h4>205: redundant code: constant expression is zero</h4>
	<p>Where a conditional expression was expected, a constant expression with the value zero was found, e.g. "while (0)" or "if (0)". The the conditional code below the test is never executed, and it is therefore redundant.</p>

	<h4>206: redundant test: constant expression is non-zero</h4>
	<p>Where a conditional expression was expected, a constant expression with a non-zero value was found, e.g. if (1). The test is redundant, because the conditional code is always executed.</p>
	<p>To create an endless loop, use for ( ;; ) instead of while (1).</p>

	<h4>207: unknown "#pragma"</h4>
	<p>The compiler ignores the pragma. The #pragma directives may change between compilers of different vendors and between different versions of a compiler of the same version.</p>

	<h4>208: function with tag result used before definition, forcing</h4>
	<p>User-defined oper- reparse ators: 86 When a function is "used" (invoked) before being declared, and that function returns a value with a tag name, the parser must make an extra pass over the source code, because the presence of the tag name may change the interpretation of operators (in the presence of user-defined operators). You can speed up the parsing/compilation process by declaring the relevant functions before using them.</p>

	<h4>209: function should return a value</h4>
	<p>The function does not have a return statement, or it does not have an expression behind the return statement, but the function’s result is used in a expression.</p>

	<h4>210: possible use of symbol before initialization: identifier</h4>
	<p>A local (uninitialized) variable appears to be read before a value is assigned to it. The compiler cannot determine the actual order of reading from and storing into variables and bases its assumption of the execution order on the physical appearance order of statements an expressions in the source file.</p>

	<h4>211: possibly unintended assignment</h4>
	<p>Where a conditional expression was expected, the assignment operator (=) was found instead of the equality operator (==). As this is a frequent mistake, the compiler issues a warning. To avoid this message, put parentheses around the expression, e.g. if ( (a=2) ).</p>

	<h4>212: possibly unintended bitwise operation</h4>
	<p>Where a conditional expression was expected, a bitwise operator (&amp; or |) was found instead of a Boolean operator (&amp;&amp; or ||). In situations where a bitwise operation seems unlikely, the compiler issues this warning. To avoid this message, put parentheses around the expression.</p>

	<h4>213: tag mismatch</h4>
	<p>A tag mismatch occurs when: <br /> - assigning to a tagged variable a value that is untagged or that has a different tag <br /> - the expressions on either side of a binary operator have different tags <br /> - in a function call, passing an argument that is untagged or that has a different tag than what the function argument was defined with <br /> - indexing an array which requires a tagged index with no tag or a wrong tag name</p>

	<h4>214: possibly a "const" array argument was intended: identifier</h4>
	<p>Arrays are always passed by reference. If a function does not modify the array argument, however, the compiler can sometimes generate more compact and quicker code if the array argument is specifically marked as "const".</p>

	<h4>215: expression has no effect</h4>
	<p>The result of the expression is apparently not stored in a variable or used in a test. The expression or expression statement is therefore redundant.</p>

	<h4>216: nested comment</h4>
	<p>pawn does not support nested comments.</p>

	<h4>217: loose indentation</h4>
	<p>Statements at the same logical level do not start in the same column; that is, the indents of the statements are different. Although pawn is a free format language, loose indentation frequently hides a logical error in the control ﬂow. The compiler can also incorrectly assume loose indentation if the tab size with which you indented the source code differs from the assumed size. This may happen if the source files use a mixture of tab and space characters to indent lines.</p>

	<h4>218: old style prototypes used with optional semicolon</h4>
	<p>When using "optional semicolons", it is preferred to explicitly declare forward functions with the forward keyword than using terminating semicolon.</p>

	<h4>219: local variable identifier shadows a symbol at a preceding</h4>
	<p>level A local variable has the same name as a global variable, a function, a function argument, or a local variable at a lower precedence level. This is called "shadowing", as the new local variable makes the previously defined function or variable inaccessible.</p>
	<p>Note: if there are also error messages further on in the script about missing variables (with these same names) or brace level problems, it could well be that the shadowing warnings are due to these syntactical and semantical errors. Fix the errors first before looking at the shadowing warnings.</p>

	<h4>220: expression with tag override must appear between parentheses</h4>
	<p>In a case statement and in expressions in the conditional operator (" ? : "), any expression that has a tag override should be enclosed between parentheses, to avoid the colon to be misinterpreted as a separator of the case statement or as part of the conditional operator.</p>

	<h4>221: label name identifier shadows tag name</h4>
	<p>A code label (for the goto instruction) has the same name as a previously defined tag. This may indicate a faultily applied tag override; a typical case is an attempt to apply a tag override on the variable on the left of the = operator in an assignment statement.</p>

	<h4>222: number of digits exceeds rational number precision</h4>
	<p>A literal rational number has more decimals in its fractional part than the precision of a rational number supports. The remaining decimals are ignored.</p>

	<h4>223: redundant "sizeof": argument size is always 1 (symbol name)</h4>
	<p>A function argument has a as its default value the size of another argument of the same function. The "sizeof" default value is only useful when the size of the referred argument is unspecified in the declaration of the function; i.e., if the referred argument is an array.</p>

	<h4>224: indeterminate array size in "sizeof" expression (symbol name)</h4>
	<p>The operand of the sizeofoperator is an array with an unspecified size. That is, the size of the variable cannot be determined at compile time. If used in an "if" instruction, consider a conditionally compiled section, replacing if by #if.</p>

	<h4>225: unreachable code</h4>
	<p>The indicated code will never run, because an instruction before (above) it causes a jump out of the function, out of a loop or elsewhere. Look for return, break, continue and goto instructions above the indicated line. Unreachable code can also be caused by an endless loop above the indicated line.</p>

	<h4>226: a variable is assigned to itself (symbol name)</h4>
	<p>There is a statement like "x = x" in the code. The parser checks for self assignments after performing any text and constant substitutions, so the left and right sides of an assignment may appear to be different at first sight. For example, if the symbol "TWO" is a constant with the value 2, then "var[TWO] = var[2]" is also a self-assignment.</p>
	<p>Self-assignments are, of course, redundant, and they may hide an error (assignment to the wrong variable, error in declaring constants).</p>
	<p>Note that the pawn parser is limited to performing "static checks" only. In this case it means that it can only compare array assignments for self-assignment with constant array indices.</p>

	<h4>227: more initiallers than enum fields</h4>
	<p>An array whose size is declared with an enum symbol contains more values/fields as initiallers than the enumeration defines.</p>

	<h4>228: length of initialler exceeds size of the enum field</h4>
	<p>An array whose size is declared with an enum symbol, and the relevant enumeration field has a size. The initialler in the array contains more values than the size of the enumeration field allows.</p>

	<h4>229: index tag mismatch (symbol name)</h4>
	<p>When indexing an array, the expression used as the index has a different tag than what the one in the declaration of the array. See pages 28 and 67 for an explanation and examples.</p>

	<h4>230: no implementation for state name in function name, no fall-back</h4>
	<p>A function is lacking an implementation for the indicated state. The compiler cannot (statically) check whether the function will ever be called in that state, and therefore it issues this warning. When the function would be called for the state for which no implementation exists, the abstract machine aborts with a run time error.</p>

	<h4>231: state specification on forward declaration is ignored</h4>
	<p>A state specification is redundant on forward declarations. The function signature must be equal for all states. Only the imple- mentations of the function are state-specific.</p>

	<h4>232: compaction buffer overflow</h4>
	<p>Compact encoding may in some particular cases result in files that would actually be bigger than the non-compact encoding. The abstract machine cannot handle this, as it unpacks the P-code "in place". When the compiler detects this situation, it re-builds the file with compact encoding switched off.</p>

	<h4>233: state variable name shadows a global variable</h4>
	<p>The state variable has the same name as a global variable (without state specifiers). This means that the global variable is inaccessible for a function with one of the same states as those of the variable.</p>

	<h4>234: function is deprecated (symbol name)</h4>
	<p>The script uses a function which as marked as "deprecated". The host application can mark (native) functions as deprecated when better alternatives for the function are available or if the function may not be supported in future versions of the host application.</p>

	<h4>235: public function lacks forward declaration (symbol name)</h4>
	<p>The script defines a public function, but no forward declaration of this function is present. Possibly the function name was written incorrectly. The requirement for forward declarations of public functions guards against a common error.</p>

	<h4>236: unknown parameter in substitution (incorrect #define pattern)</h4>
	<p>A #define pattern contains a parameter in the replacement (e.g. "%1", but one in the match pattern).</p>

	<h4>237: recursive function name</h4>
	<p>The specified function calls itself recursively. Although this is valid in pawn, a self-call is often an error. Note that this warning is only generated when the pawn parser/compiler is set to "verbose" mode.</p>

	<h4>238: mixing string formats in concatenation</h4>
	<p>In concatenating literals strings, strings with different formats (such as packed versus unpacked, and "plain" versus standard strings) were combined. This is usually an error. The parser uses the format of the first (left-most) string in the concatenation for the result.</p>

</div>